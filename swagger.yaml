openapi: 3.0.4
info:
  title: Grupo 13 - Tech Challenger 1° Fase - 1.0
  description: |-
    sistema robusto que permita a todos os
    restaurantes gerenciar eficientemente suas operações, enquanto os clientes
    poderão consultar informações, deixar avaliações e fazer pedidos online.
    Devido à limitação de recursos financeiros, foi acordado que a entrega do
    sistema será realizada em fases, garantindo que cada etapa seja desenvolvida
    de forma cuidadosa e eficaz.
  termsOfService: https://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: https://http://localhost:8080
paths:
  /user:
    post:
      tags:
        - User
      summary: Create user.
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John
                email:
                  type: string
                  example: john@email.com
                userlogin:
                  type: string
                  example: theUser
                password:
                  type: string
                  example: '12345'
                adress:
                  type: string
                  example: '12345'
                tipoUser:
                  type: string
                  example: 'adm'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - User
      summary: Logs user into the system.
      description: Log into the system.
      operationId: loginUser
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/{id}:
    delete:
      tags:
        - User
      summary: Delete user resource.
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: number
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - User
      summary: Creates list of users with given input array.
      description: Creates list of users with given input array.
      operationId: createUsersWithListInput
      parameters:
        - name: id
          in: path
          description: Id should be to change
          required: true
          schema:
            type: number
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/changepassword/{email}:
    put:
      tags:
        - User
      summary: Change user password
description: Update the password for the user with the specified email.
operationId: changeUserPassword

      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newpassword:
                  type: string
                  example: John

      responses:
        '200':
          description: successful operation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/login:
    post:
      tags:
        - User
      description: Log user out of the system.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: 'carlos123'
                password:
                  type: string
                  example: '12345566'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: John
        email:
          type: string
          example: john@email.com
        userlogin:
          type: string
          example: theUser
        password:
          type: string
          example: '12345'
        adress:
          type: string
          example: '12345'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        datatime:
          type: string
          example: '2025-09-15 11:30:45'
      required:
        - code
        - message
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header